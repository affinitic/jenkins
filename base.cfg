[buildout]
python = buildout
parts = xmltest
        xmltest-robot
        coverage
        i18ndude
        report
        pylint
        pylint-test
        pyflakes
        pyflakes-test
        zptlint
        zptlint-test
        xmllint-test
        pep8
        pep8-test
        test-all

package-directories =

[jenkins-test-env]
zope_i18n_compile_mo_files = true

[xmltest]
recipe = collective.xmltestreport
eggs =
    ${test:eggs}
script = test
environment = jenkins-test-env
defaults = ['--auto-color', '--auto-progress', '--xml'] + ${test-runner:defaults}
extra-paths = ${test:extra-paths}
relative-paths = true

[xmltest-robot]
recipe = collective.xmltestreport
eggs =
    ${test:eggs}
script = test-robot
environment = jenkins-test-env
defaults = ['--auto-color', '--auto-progress', '--xml'] + ${test-robot:defaults}
extra-paths = ${test:extra-paths}
relative-paths = true

[coverage-test]
recipe = zc.recipe.testrunner
eggs = ${test:eggs}
defaults = ['--coverage', '${buildout:directory}/coverage', '-v', '--auto-progress', '--xml']
relative-paths = true

[coverage-report]
recipe = zc.recipe.egg
eggs = z3c.coverage
scripts = coveragereport
arguments = ('coverage', 'report')
relative-paths = true

[pylint]
recipe = zc.recipe.egg
eggs = pylint
#extra-paths = ${instance:location}/lib/python
entry-points = pylint=pylint.lint:Run
arguments = sys.argv[1:]
arguments = [
    '--output-format=parseable',
    '--zope=y',
    '--reports=y',
    '--disable=E0611,F0401,W0232,E1101,C0103,C0111,R0201,W0201,R0911,R0904,F0220,E1103,R0901,E0211,E0213,E1002,W0622,C0301,W0212,R0903',
    '--generated-members=objects',
    ] + sys.argv[1:]
relative-paths = true

# Disable messages:
#
# E0611: No name %r in module %r. Used when a name cannot be found in a module.
# F0401: Unable to import %r (%s). Used when pylint has been unable to import a module.
# W0232: Class has no __init__ method. Used when a class has no __init__ method, neither its parent classes.
# C0103: Invalid name "%s" (should match %s). Used when the name doesn't match the regular expression associated to its type (constant, variable, class...).
# C0111: Message Missing docstring Description Used when a module, function, class or method has no docstring. Some special methods like init don't necessary require a docstring. ExplanationÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦
# R0201: Method could be a function
# W0201: Attribute %r defined outside __init__
# R0911: Too many return statements (%s/%s)

# E0211: Method has no argument
#        - Reason: raises an error on zope.interface definitions
# E0213 Method should have "self" as first argument
#       - Reason: raises an error on zope.interface definitions
# E1121 Too many positional arguments for function call
#       - Reason: ???
# E1002 Use super on an old style class
#       - Reason: super(CommentsViewlet, self).update() raises an error
# W0622 total_comments: Redefining built-in 'object'
#       - Reason: top level def function will not work (e.g. for catalog indexers)
# ...
# See http://pylint-messages.wikidot.com/all-messages for a full list.

[pylint-test]
recipe = collective.recipe.template
inline =
    #!/bin/sh
    if [ -s pylint.log ]; then
      rm pylint.log
      echo "Old pylint.log file removed"
    fi
    echo "Running pylint"
    PACKAGES="${buildout:package-directories}"
    for pkg in $PACKAGES
    do
        find -L $pkg -regex ".*\.py" | xargs bin/pylint >> pylint.log
    done
    echo "Finished"
output = ${buildout:directory}/bin/pylint-test
mode = 755

[zptlint]
recipe = zc.recipe.egg
eggs =
   zptlint
entry-points = zptlint=zptlint:run
relative-paths = true

[zptlint-test]
recipe = collective.recipe.template
inline =
    #!/bin/sh
    if [ -e zptlint.log ]; then
      echo "Old zptlint.log file removed"
      rm zptlint.log
    fi
    echo "Running zptlint-test"
    PACKAGES="${buildout:package-directories}"
    for pkg in $PACKAGES
    do
        find -L $pkg -regex ".*\.[c|z]?pt" | xargs -r bin/zptlint | perl -p -e 's/\s+$/ /g;s/\s+/ /g;s/\*{3}s?/\n/g' | grep $pkg | sed 's:${buildout:directory}/::' >> zptlint.log
    done
output = ${buildout:directory}/bin/zptlint-test
mode = 755

[pyflakes]
recipe = zc.recipe.egg
eggs =
   pyflakes
entry-points = pyflakes=pyflakes.scripts.pyflakes:main
relative-paths = true

[pyflakes-test]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    if [ -s pyflakes.log ]; then
      rm pyflakes.log
      echo "Old pyflakes.log file removed"
    fi
    if [ -s pyflakes.log.tmp ]; then
      rm pyflakes.log.tmp
    fi
    echo "Running pyflakes"
    PACKAGES="${buildout:package-directories}"
    for pkg in $PACKAGES
    do
        find -L $pkg -regex ".*\.py" | xargs -r bin/pyflakes >> pyflakes.log.tmp
    done
    cat pyflakes.log.tmp|sed 's:${buildout:directory}/::' > pyflakes.log
output = ${buildout:directory}/bin/pyflakes-test
mode = 755

[pep8]
recipe = zc.recipe.egg
eggs =
   pep8
entry-points = pep8=pep8:_main
relative-paths = true

[pep8-test]
recipe = collective.recipe.template
inline =
    #!/bin/sh
    if [ -s pep8.log ]; then
      rm pep8.log
      echo "Old pep8.log file removed"
    fi
    if [ -s pep8.log.tmp ]; then
      rm pep8.log.tmp
    fi
    echo "Running pep8"
    PACKAGES="${buildout:package-directories}"
    for pkg in $PACKAGES
    do
        find -L $pkg -regex ".*\.py" | xargs -r bin/pep8 >> pep8.log.tmp
    done
    cat pep8.log.tmp|sed 's:${buildout:directory}/::' > pep8.log
output = ${buildout:directory}/bin/pep8-test
mode = 755

[xmllint-test]
recipe = collective.recipe.template
inline =
    #!/bin/sh
    if [ -e xmllint.log ]; then
      echo "Removing existing xmllint.log file"
      rm xmllint.log
    fi
    echo "Running xmllint-test"
    for pkg in $PACKAGES
    do
    find -L $pkg ".*\.[c|z]?pt"| xargs xmllint --noout 2>&1| grep ${buildout:directory} | sed 's:${buildout:directory}/::' >> xmllint.log
    done
    if [ -s xmllint.log ]; then
      echo "Errors were found:"
      cat xmllint.log
      echo "Errors were written to xmllint.log"
      exit 1;
    else
      echo "No errors found"
      touch xmllint.log
    fi
output = ${buildout:directory}/bin/xmllint-test
mode = 755

[test-all]
recipe = collective.recipe.template
inline =
    #!/bin/sh
    set -xe
    bin/test --xml
    bin/coverage
    bin/report
    bin/xmllint-test
    bin/zptlint-test
    bin/pep8-test
    bin/pyflakes-test
    bin/pylint-test
output = ${buildout:directory}/bin/test-all
mode = 755

[coverage]
recipe = zc.recipe.egg
eggs = coverage
initialization =
    sys.argv = sys.argv[:] + ['run', 'bin/test', '-k', '-q', '--xml', '--test=!robot']
relative-paths = true

[report]
recipe = zc.recipe.egg
eggs = coverage
scripts = coverage=report
initialization =
    eggs = '${buildout:eggs-directory}'
    bin = '${buildout:directory}/bin'
    exclude = '--omit=' + ','.join([eggs, sys.prefix, bin])
    sys.argv = sys.argv[:] + ['xml', '-i', exclude]
relative-paths = true

[code-analysis]
pre-commit-hook = False
recipe = plone.recipe.codeanalysis
directory = ../src
multiprocessing = True
jenkins = True
clean-lines = True
clean-lines-exclude =
    *.pt
    *.js
    *.txt
find-untranslated = True
i18ndude-bin = ${buildout:bin-directory}/i18ndude
flake8-ignore = E501,E711,E712
flake8-max-complexity = 10
flake8-extensions = flake8-debugger

[i18ndude]
recipe = zc.recipe.egg
eggs = i18ndude

[versions]
python-ldap = 2.4.7
selenium = 3.5.0
# code-analysis
plone.recipe.codeanalysis = 2.1
flake8 = 3.3.0
flake8-debugger = 3.0.0
check-manifest = 0.36
configparser = 3.5.0
enum34 = 1.1.6
mccabe = 0.6.1
pycodestyle = 2.3.1
